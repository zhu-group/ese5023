270,           292,           281,           255,
255.8,           294,           276)
hist(score)
summary(score)
score <- c(283,            251,           264,           173.8,
266,           158.8,           223,           246.9,
270,           292,           281,           255,
255.8,           294,           276)/310*100
hist(score)
summary(score)
shapiro.test(score)
score <- c(283,           251,           264,           173.8,
266,           158.8,         223,           246.9,
270,           292,           281,           255,
255.8,         294,           276)/310*100
hist(score)
summary(score)
shapiro.test(score)
# Load libraries
library(randtests)
library(EnvStats)
library(outliers)
library(FSA)
library(ggplot2)
library(GGally)
library(olsrr)
library(dplyr)
library(lubridate)
library(forecast)
#/////////////////////////////////////////////////////////////////////
# 3.1
#/////////////////////////////////////////////////////////////////////
before <- c(6.56, 	4.13, 	5.09, 	4.71, 	6.01, 	5.53, 	4.94, 	5.97,
5.09, 	4.69, 	5.49, 	6.65, 	6.17, 	7.83, 	6.22, 	5.08,
6.45, 	6.40, 	5.29, 	5.42, 	6.68, 	6.00, 	4.88, 	6.08,
4.82, 	5.30, 	5.88, 	6.19, 	5.86, 	5.01, 	5.81, 	7.63)
after <- c(6.12, 	4.59, 	5.33, 	5.83, 	5.34, 	5.37, 	5.29, 	5.55,
5.80, 	5.22, 	5.29, 	4.84, 	2.35, 	5.04, 	3.60, 	4.08,
5.11, 	5.76, 	5.48, 	4.96, 	5.51,	4.46, 	5.52, 	5.35,
5.19, 	4.88, 	5.91, 	6.57,	6.74, 	5.18, 	5.98, 	5.51)
new <- after - before
shapiro.test(new)
# The student can also use the Mann-Whitney U test
wilcox.test(after, before, paired=T, alternative="less")
# Without the outliner
t.test(after_new,before_new,alternative = "less")
# Load libraries
library(randtests)
library(EnvStats)
library(outliers)
library(FSA)
library(ggplot2)
library(GGally)
library(olsrr)
library(dplyr)
library(lubridate)
library(forecast)
#/////////////////////////////////////////////////////////////////////
# 3.1
#/////////////////////////////////////////////////////////////////////
before <- c(6.56, 	4.13, 	5.09, 	4.71, 	6.01, 	5.53, 	4.94, 	5.97,
5.09, 	4.69, 	5.49, 	6.65, 	6.17, 	7.83, 	6.22, 	5.08,
6.45, 	6.40, 	5.29, 	5.42, 	6.68, 	6.00, 	4.88, 	6.08,
4.82, 	5.30, 	5.88, 	6.19, 	5.86, 	5.01, 	5.81, 	7.63)
after <- c(6.12, 	4.59, 	5.33, 	5.83, 	5.34, 	5.37, 	5.29, 	5.55,
5.80, 	5.22, 	5.29, 	4.84, 	2.35, 	5.04, 	3.60, 	4.08,
5.11, 	5.76, 	5.48, 	4.96, 	5.51,	4.46, 	5.52, 	5.35,
5.19, 	4.88, 	5.91, 	6.57,	6.74, 	5.18, 	5.98, 	5.51)
new <- after - before
shapiro.test(new)
# Test for normality
shapiro.test(before)
shapiro.test(after)
# Randomness test
runs.test(before)
runs.test(after)
# after group has one outliner
# use Rosner??s test to check outliers
rosnerTest(before)
rosnerTest(after)
# Remove the outliner
before_new <- c(6.56, 	4.13, 	5.09, 	4.71, 	6.01, 	5.53, 	4.94, 	5.97,
5.09, 	4.69, 	5.49, 	6.65, 	7.83, 	6.22, 	5.08,
6.45, 	6.40, 	5.29, 	5.42, 	6.68, 	6.00, 	4.88, 	6.08,
4.82, 	5.30, 	5.88, 	6.19, 	5.86, 	5.01, 	5.81, 	7.63)
after_new <-  c(6.12, 	4.59, 	5.33, 	5.83, 	5.34, 	5.37, 	5.29, 	5.55,
5.80, 	5.22, 	5.29, 	4.84, 	5.04, 	3.60, 	4.08,
5.11, 	5.76, 	5.48, 	4.96, 	5.51,	  4.46, 	5.52, 	5.35,
5.19, 	4.88, 	5.91, 	6.57,	  6.74, 	5.18, 	5.98, 	5.51)
# Check again
shapiro.test(after_new)
rosnerTest(after_new)
# Use pair t-test
# Use one-sided p-value
# Without the outliner
t.test(after_new,before_new,alternative = "less")
# With the outliner
t.test(after,before,alternative = "less",paired = T)
# Without the outliner
t.test(after_new,before_new,alternative = "less",paired = T)
# Without the outliner
t.test(after_new,before_new,alternative = "less",paired = T)
# With the outliner
t.test(after,before,alternative = "less",paired = T)
# Without the outliner
t.test(after_new,before_new,alternative = "less",paired = T)
# With the outliner
t.test(after,before,alternative = "less",paired = T)
# With the outliner
t.test(after,before,alternative = "less",paired = T)
# Without the outliner
t.test(after_new,before_new,alternative = "less",paired = T)
# Without the outliner
t.test(after_new,before_new,alternative = "less",paired = T)
# With the outliner
t.test(after,before,alternative = "less",paired = T)
# Test for normality
shapiro.test(before)
shapiro.test(after)
# Randomness test
runs.test(before)
runs.test(after)
# after group has one outliner
# use Rosner??s test to check outliers
rosnerTest(before)
rosnerTest(after)
# With the outliner
t.test(after,before,alternative = "less",paired = T)
# Without the outliner
t.test(after_new,before_new,alternative = "less",paired = T)
# Load libraries
library(randtests)
library(EnvStats)
library(outliers)
library(FSA)
library(ggplot2)
library(GGally)
library(olsrr)
library(dplyr)
library(lubridate)
library(forecast)
#/////////////////////////////////////////////////////////////////////
# 3.1
#/////////////////////////////////////////////////////////////////////
before <- c(6.56, 	4.13, 	5.09, 	4.71, 	6.01, 	5.53, 	4.94, 	5.97,
5.09, 	4.69, 	5.49, 	6.65, 	6.17, 	7.83, 	6.22, 	5.08,
6.45, 	6.40, 	5.29, 	5.42, 	6.68, 	6.00, 	4.88, 	6.08,
4.82, 	8.97, 	5.88, 	6.19, 	5.86, 	5.01, 	5.81, 	7.63)
after <- c(6.12, 	4.59, 	5.33, 	5.83, 	5.34, 	5.37, 	5.29, 	5.55,
5.80, 	5.22, 	5.29, 	4.84, 	2.35, 	5.04, 	3.60, 	4.08,
5.11, 	5.76, 	5.48, 	4.96, 	5.51,	4.46, 	5.52, 	5.35,
5.19, 	4.88, 	5.91, 	6.57,	6.74, 	5.18, 	5.98, 	5.51)
new <- after - before
shapiro.test(new)
# Test for normality
shapiro.test(before)
shapiro.test(after)
# Randomness test
runs.test(before)
runs.test(after)
# after group has one outliner
# use Rosner??s test to check outliers
rosnerTest(before)
rosnerTest(after)
# Remove the outliner
before_new <- c(6.56, 	4.13, 	5.09, 	4.71, 	6.01, 	5.53, 	4.94, 	5.97,
5.09, 	4.69, 	5.49, 	6.65, 	7.83, 	6.22, 	5.08,
6.45, 	6.40, 	5.29, 	5.42, 	6.68, 	6.00, 	4.88, 	6.08,
4.82, 	5.30, 	5.88, 	6.19, 	5.86, 	5.01, 	5.81, 	7.63)
after_new <-  c(6.12, 	4.59, 	5.33, 	5.83, 	5.34, 	5.37, 	5.29, 	5.55,
5.80, 	5.22, 	5.29, 	4.84, 	5.04, 	3.60, 	4.08,
5.11, 	5.76, 	5.48, 	4.96, 	5.51,	  4.46, 	5.52, 	5.35,
5.19, 	4.88, 	5.91, 	6.57,	  6.74, 	5.18, 	5.98, 	5.51)
# Check again
shapiro.test(after_new)
rosnerTest(after_new)
# Use pair t-test
# Use one-sided p-value
# Without the outliner
t.test(after_new,before_new,alternative = "less",paired = T)
# With the outliner
t.test(after,before,alternative = "less",paired = T)
# The student can also use the Mann-Whitney U test
wilcox.test(after, before, paired=T, alternative="less")
# So the data show the air purifier is useful in reducing indoor PM2.5
# p < 0.05
#/////////////////////////////////////////////////////////////////////
# 3.2
#/////////////////////////////////////////////////////////////////////
PA <- c(73, 102, 118, 104, 98, 107, 100, 87, 117, 111)
PB <- c(98, 74, 56, 111, 95, 88, 82, 77, 86, 92)
PC <- c(94, 79, 96, 95, 102, 102, 108, 91, 120, 105)
PD <- c(97, 103, 90, 99, 103, 109, 108, 101, 98, 115)
# Test for normality
shapiro.test(c(PA,PB,PC,PD))
shapiro.test(PA)
shapiro.test(PB)
shapiro.test(PC)
shapiro.test(PD)
# Randomness test
runs.test(PA)
runs.test(PB)
runs.test(PC)
runs.test(PD)
# after group has one outliner
# use dixon.test()
dixon.test(PA)
dixon.test(PB)
dixon.test(PC)
dixon.test(PD)
# Make data frame
phytoplankton_data  <- data.frame(O2=c(PA, PB, PC, PD),
group=c(rep("A", length(PA)),
rep("B", length(PB)),
rep("C", length(PC)),
rep("D", length(PD)) ))
# Do the ANOVA
oneway.test(O2 ~ group, data=phytoplankton_data, var.equal=T)
res_aov <- aov(O2 ~ group, data=phytoplankton_data)
summary(res_aov)
# Check assumptions, not bad
par(mfrow=c(2,2))
plot(res_aov)
# Pairwise comparsion
TukeyHSD(res_aov)
par(mfrow=c(1,1))
# Perform the Kruskalâ€“Wallis test
kruskal.test(O2 ~ group, data = phytoplankton_data)
dunnTest(O2 ~ group, data=phytoplankton_data, method="bh")
#/////////////////////////////////////////////////////////////////////
# 3.3
#/////////////////////////////////////////////////////////////////////
#/////////////////////////////////////////////////////////////////////
# 3.3
#/////////////////////////////////////////////////////////////////////
Pressure    <- c(999.9,  999.4,  999.1,  999.6,  998.5,
1000.8, 1002.0,  999.4, 1002.7, 1003.2,
996.6, 1003.0, 1004.3, 1000.4,  998.3)
Temperature <- c(20.2, 21.1, 19.3, 17.5, 16.9, 22.5, 13.6,
21.2, 23.5, 18.6, 25.0, 23.6, 17.0, 27.2, 14.1)
Humidity    <- c(44, 56, 20, 31, 60, 48, 76, 65, 60,
74, 68, 69, 50, 36, 63)
Traffic     <- c(357, 256, 270, 541, 254, 337, 411, 280,
289,  88, 275, 358, 380, 268, 523)
AQI         <- c(377, 307, 280, 388, 268, 347, 308, 247,
289, 200, 329, 385, 337, 336, 384)
# Make data frame
AQI_data  <- data.frame(cbind(AQI,Pressure,Temperature,Humidity,Traffic))
str(AQI_data)
# Plot scatter plots
ggpairs(AQI_data,columns=1:5)
# no clear multicollinearity
# Randomness test
runs.test(AQI_data$AQI)
# use dixon.test() to check outliers
dixon.test(AQI_data$AQI)
# no outliers
# Build the full model
full_model <- lm(AQI ~ Pressure + Temperature + Humidity + Traffic )
summary(full_model)
# Test all possible subsets
output      <- ols_step_all_possible(full_model)
# Print results from all possible subsets
output
# Select the best model
ols_step_best_subset(full_model)
ols_step_backward_aic(full_model, details=F)
ols_step_forward_aic(full_model, details=F)
# This is the best model
reg <- lm(AQI ~ Temperature + Traffic )
# 24 Spring, 6.40475T + 0.48960*Traffic + 30.63780
# New point
new_points <- data.frame(Pressure = c(1003.0,1001.0 ), Temperature = c(25.0,15.0 ),
Humidity = c(75, 55), Traffic = c(450,310 ) )
# Make prediction for the mean or individual response
predict(reg, newdata = new_points, interval="prediction", level=0.95)
predict(reg, newdata = new_points, interval="confidence", level=0.95)
# This is the best model
reg <- lm(AQI ~ Temperature + Traffic )
summary(reg)
# Make prediction for the mean or individual response
predict(reg, newdata = new_points, interval="prediction", level=0.95)
# New point
new_points <- data.frame(Pressure = c(1003.0,1001.0 ), Temperature = c(25.0,15.0 ),
Humidity = c(75, 55), Traffic = c(450,300 ) )
# Make prediction for the mean or individual response
predict(reg, newdata = new_points, interval="prediction", level=0.95)
predict(reg, newdata = new_points, interval="confidence", level=0.95)
# Load libraries
library(randtests)
library(EnvStats)
library(outliers)
library(FSA)
library(ggplot2)
library(GGally)
library(olsrr)
library(dplyr)
library(lubridate)
library(forecast)
#/////////////////////////////////////////////////////////////////////
# 3.1
#/////////////////////////////////////////////////////////////////////
before <- c(6.26, 	4.13, 	5.09, 	4.71, 	6.01, 	5.53, 	4.94, 	5.97,
5.09, 	4.69, 	5.49, 	6.65, 	6.17, 	7.83, 	6.22, 	5.08,
6.45, 	6.40, 	5.29, 	5.42, 	6.68, 	6.00, 	4.88, 	6.08,
4.82, 	8.97, 	5.88, 	6.19, 	5.86, 	5.01, 	5.81, 	7.63)
after <- c(6.12, 	4.59, 	5.33, 	5.83, 	5.34, 	5.37, 	5.29, 	5.55,
5.80, 	5.22, 	5.29, 	4.84, 	2.35, 	5.04, 	3.60, 	4.08,
5.11, 	5.76, 	5.48, 	4.96, 	5.51,	 4.46, 	5.52, 	5.35,
5.19, 	4.88, 	5.91, 	6.57,	6.74, 	5.18, 	5.98, 	5.61)
new <- after - before
shapiro.test(new)
# Test for normality
shapiro.test(before)
shapiro.test(after)
# Randomness test
runs.test(before)
runs.test(after)
# after group has one outliner
# use Rosner??s test to check outliers
rosnerTest(before)
rosnerTest(after)
# Remove the outliners
before_new <- c(6.26, 	4.13, 	5.09, 	4.71, 	6.01, 	5.53, 	4.94, 	5.97,
5.09, 	4.69, 	5.49, 	6.65, 	7.83, 	6.22, 	5.08,
6.45, 	6.40, 	5.29, 	5.42, 	6.68, 	6.00, 	4.88, 	6.08,
4.82, 	5.88, 	6.19, 	5.86, 	5.01, 	5.81, 	7.63)
after_new <-  c(6.12, 	4.59, 	5.33, 	5.83, 	5.34, 	5.37, 	5.29, 	5.55,
5.80, 	5.22, 	5.29, 	4.84, 	5.04, 	3.60, 	4.08,
5.11, 	5.76, 	5.48, 	4.96, 	5.51,	  4.46, 	5.52, 	5.35,
5.19, 	5.91, 	6.57,	  6.74, 	5.18, 	5.98, 	5.61)
# Check again
shapiro.test(before_new)
rosnerTest(before_new)
shapiro.test(after_new)
rosnerTest(after_new)
# Use pair t-test
# Use one-sided p-value
# Without the outliner
t.test(after_new,before_new,alternative = "less",paired = T)
# With the outliner
t.test(after,before,alternative = "less",paired = T)
# The student can also use the Mann-Whitney U test
wilcox.test(after, before, paired=T, alternative="less")
# So the data show the air purifier is useful in reducing indoor PM2.5
# p < 0.05
#/////////////////////////////////////////////////////////////////////
# 3.2
#/////////////////////////////////////////////////////////////////////
PA <- c(73, 102, 118, 104, 98, 107, 100, 87, 117, 111)
PB <- c(98, 74, 56, 111, 95, 88, 82, 77, 86, 92)
PC <- c(94, 79, 96, 98, 102, 102, 108, 91, 120, 105)
PD <- c(97, 100, 90, 99, 103, 109, 108, 101, 98, 115)
# Test for normality
shapiro.test(c(PA,PB,PC,PD))
shapiro.test(PA)
shapiro.test(PB)
shapiro.test(PC)
shapiro.test(PD)
# Randomness test
runs.test(PA)
runs.test(PB)
runs.test(PC)
runs.test(PD)
# after group has one outliner
# use dixon.test()
dixon.test(PA)
dixon.test(PB)
dixon.test(PC)
dixon.test(PD)
# Make data frame
phytoplankton_data  <- data.frame(O2=c(PA, PB, PC, PD),
group=c(rep("A", length(PA)),
rep("B", length(PB)),
rep("C", length(PC)),
rep("D", length(PD)) ))
# Do the ANOVA
oneway.test(O2 ~ group, data=phytoplankton_data, var.equal=T)
res_aov <- aov(O2 ~ group, data=phytoplankton_data)
summary(res_aov)
# Check assumptions, not bad
par(mfrow=c(2,2))
plot(res_aov)
par(mfrow=c(1,1))
# Pairwise comparsion
TukeyHSD(res_aov)
# Only B-A and D-B has significant difference.
#/////////////////////////////////////////////////////////////////////
# 3.3
#/////////////////////////////////////////////////////////////////////
Pressure    <- c(999.9,  999.4,  999.1,  999.6,  998.5,
1000.8, 1002.0,  999.4, 1002.7, 1003.2,
996.6, 1003.0, 1004.3, 1000.4,  998.3)
Temperature <- c(20.2, 21.1, 19.3, 17.5, 16.9, 22.5, 13.6,
21.2, 23.5, 18.6, 25.0, 23.6, 17.0, 27.2, 14.1)
Humidity    <- c(44, 56, 20, 31, 60, 48, 76, 65, 60,
74, 68, 69, 50, 36, 63)
Traffic     <- c(357, 256, 270, 541, 254, 337, 411, 280,
289,  88, 275, 358, 380, 268, 523)
AQI         <- c(367, 307, 280, 388, 268, 347, 308, 247,
289, 200, 329, 385, 337, 336, 394)
# Make data frame
AQI_data  <- data.frame(cbind(AQI,Pressure,Temperature,Humidity,Traffic))
str(AQI_data)
# Plot scatter plots
ggpairs(AQI_data,columns=1:5)
# no clear multicollinearity
# Randomness test
runs.test(AQI_data$AQI)
# use dixon.test() to check outliers
dixon.test(AQI_data$AQI)
# no outliers
# Build the full model
full_model <- lm(AQI ~ Pressure + Temperature + Humidity + Traffic )
summary(full_model)
# Test all possible subsets
output      <- ols_step_all_possible(full_model)
# Print results from all possible subsets
output
# Select the best model
ols_step_best_subset(full_model)
ols_step_backward_aic(full_model, details=F)
ols_step_forward_aic(full_model, details=F)
# This is the best model
reg <- lm(AQI ~ Temperature + Traffic )
summary(reg)
Pressure    <- c(999.9,  999.4,  999.1,  999.6,  998.5,
1000.8, 1002.0,  999.4, 1002.7, 1003.2,
996.6, 1003.0, 1004.3, 1000.4,  998.3)
Temperature <- c(20.2, 21.1, 19.3, 17.5, 16.9, 22.5, 13.6,
21.2, 23.5, 18.6, 25.0, 23.6, 17.0, 27.2, 14.1)
Humidity    <- c(44, 56, 20, 31, 60, 48, 76, 65, 60,
74, 68, 69, 50, 36, 63)
Traffic     <- c(357, 256, 270, 541, 254, 337, 411, 280,
289,  88, 275, 358, 380, 268, 523)
AQI         <- c(377, 307, 280, 388, 268, 347, 308, 247,
289, 200, 329, 385, 337, 336, 384)
# Make data frame
AQI_data  <- data.frame(cbind(AQI,Pressure,Temperature,Humidity,Traffic))
str(AQI_data)
# Plot scatter plots
ggpairs(AQI_data,columns=1:5)
# no clear multicollinearity
# Randomness test
runs.test(AQI_data$AQI)
# use dixon.test() to check outliers
dixon.test(AQI_data$AQI)
# no outliers
# Build the full model
full_model <- lm(AQI ~ Pressure + Temperature + Humidity + Traffic )
summary(full_model)
# Test all possible subsets
output      <- ols_step_all_possible(full_model)
# Print results from all possible subsets
output
# Select the best model
ols_step_best_subset(full_model)
ols_step_backward_aic(full_model, details=F)
ols_step_forward_aic(full_model, details=F)
# This is the best model
reg <- lm(AQI ~ Temperature + Traffic )
summary(reg)
# New point
new_points <- data.frame(Pressure = c(1003.0,1001.0 ), Temperature = c(25.0,15.0 ),
Humidity = c(75, 55), Traffic = c(450,300 ) )
# Make prediction for the mean or individual response
predict(reg, newdata = new_points, interval="prediction", level=0.95)
predict(reg, newdata = new_points, interval="confidence", level=0.95)
# Build the full model
full_model <- lm(AQI ~ Pressure + Temperature + Humidity + Traffic )
summary(full_model)
# This is the best model
reg <- lm(AQI ~ Temperature + Traffic )
summary(reg)
predict(reg, newdata = new_points, interval="confidence", level=0.95)
# This is the best model
reg <- lm(AQI ~ Temperature + Traffic )
summary(reg)
# Read data
Keeling_Data     <- read.csv(file = "co2_monthly_mlo_1990_2024.csv", header = T)
# Verify, 2024-02, 2024-03, 2024-04
predicted_co2 <- c(423.7210, 424.3975, 425.9746)
obs_co2       <- c(424.62, 425.38, 426.57)
(predicted_co2-obs_co2)/obs_co2*100
P1 <- c(21, 14, 26, 16, 27,
30, 19, 30, 29, 31,
27, 27, 37, 33, 38 )
P2 <- c(43, 43, 53, 55, 53,
48, 49, 54, 51, 52,
55, 43, 58, 55, 52 )
P1 + P2
shapiro.test(P1)
shapiro.test(P2)
shapiro.test(P1+P2)
mean(P1+P2)
sd(P1+P2)
boxplot(P1+P2)
summary(P1+P2)
hist(P1+P2)
hist(P1)
hist(P2)
boxplot(P1+P2)
shapiro.test(P1)
shapiro.test(P2)
shapiro.test(P1+P2)
hist(P1+P2)
453/8*12
setwd("D://repo/ese5023")
rmarkdown::render_site()
rmarkdown::render_site()
setwd("D://repo/ese5023")
rmarkdown::render_site()
